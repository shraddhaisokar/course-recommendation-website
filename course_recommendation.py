# -*- coding: utf-8 -*-
"""course_recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/132gEyR-Valaf2e8Gup5dMgcKLV58xVuk
"""

import pandas as pd
import numpy as np

courses=pd.read_csv("udemy_courses.csv")

courses.head()

#title
#is_paid
#num_subscribers
#level
#duration
#subject

courses["subject"].value_counts()

courses.info()

courses=courses[['course_title','is_paid','num_subscribers','level','content_duration','subject']]
courses['title']=courses['course_title'].copy()
courses['domain']=courses['subject'].copy()
courses['level']=courses['level'].copy()
courses.head()

courses.isnull().sum()

courses.duplicated().sum()

courses=courses.drop_duplicates()

courses['subject']=courses['subject'].str.replace(' ','')

courses.iloc[0]

courses['subject']=courses['subject'].apply(lambda x:x.split())
courses['subject'].apply(lambda x:[i.replace(" ","")for i in x])
courses.head()

courses['title']=courses['title'].apply(lambda x:x.split())
courses['title'].apply(lambda x:[i.replace(" ","")for i in x])



courses['course_level']=courses['level'].copy()

courses['level']=courses['level'].str.replace(' ','')

courses.head()

courses.head()

courses['durations']=courses['content_duration'].copy()

print(courses)

courses['is_paid'] = courses['is_paid'].astype(str)
courses['num_subscribers'] = courses['num_subscribers'].astype(str)

courses['content_duration'] = courses['content_duration'].astype(str)

courses['num_subscribers']=courses['num_subscribers'].apply(lambda x:x.split())



courses['content_duration']=courses['content_duration'].apply(lambda x:x.split())

courses['is_paid']=courses['is_paid'].apply(lambda x:x.split())



courses['level']=courses['level'].apply(lambda x:x.split())
courses['level'].apply(lambda x:[i.replace(" ","")for i in x])
courses.head()

courses['course_level']=courses['course_level'].apply(lambda x:x.split())
courses['course_level'].apply(lambda x:[i.replace(" ","")for i in x])
courses.head()

courses.head()

courses['tags']=courses['is_paid']+courses['content_duration']+courses['subject']+courses['course_level']

newc = courses[['course_title','durations','domain','tags','level']]
newc

newc['tags'] = newc['tags'].apply(lambda x:" ".join(x))

newc.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 3679,stop_words = 'english')

vectors = cv.fit_transform(newc['tags']).toarray()
vectors

cv.get_feature_names_out()

"""from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)
"""

from sklearn.metrics.pairwise import cosine_similarity
similarity=cosine_similarity(vectors)

print(similarity)

def recommend(course_domain, min_duration=None, max_duration=None,level = 'AllLevels'):
    # Find the index of the given course title in the DataFrame
    index = newc[newc['domain'] == course_domain].index

    if len(index) == 0:
        print("Course not found.")
        return

    index = index[0]

    # Calculate the similarity scores for the given course with all other courses
    distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])

    recommended_courses = []

    # Iterate over the sorted similarity scores and filter courses based on duration
    for i in distances[1:]:  # Start from 1 since the first one is the course itself
        course_index = i[0]

        course_duration = newc.iloc[course_index]['durations']
        course_level=newc.iloc[course_index]['level'][0]
        if (min_duration is None or course_duration >= min_duration) and \
           (max_duration is None or course_duration <= max_duration) and (course_level==level or course_level=="AllLevels"):
            recommended_courses.append(newc.iloc[course_index]['course_title'])

        if len(recommended_courses) >= 10:
            break

    # Print recommended courses
    if recommended_courses:
        print("Recommended courses:")
        for course in recommended_courses:
            print(course)
    else:
        print("No courses found within the specified duration range.")

# Call the function with a course title and optional duration range
recommend("Musical Instruments", min_duration=4, max_duration=5,level = "BeginnerLevel")